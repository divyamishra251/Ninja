// Expose parameter for Multibranch or Pipeline
properties([
  parameters([
    choice(
      name: 'action',
      choices: ['apply', 'destroy'],
      description: 'Select the action to perform'
    )
  ])
])

pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1' // pass it explicitly if needed
    }

    stages {

        stage('Checkout Repository') {
            steps {
                git url: 'https://github.com/divyamishra251/Ninja.git', branch: 'main'
            }
        }

        stage('Terraform & Ansible') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    script {
                        withEnv([
                            "AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}",
                            "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}",
                            "AWS_REGION=${env.AWS_REGION}"
                        ]) {
                            dir('Infra_setup/terraform-postgresql-modules') {
                                sh '''
                                    terraform init
                                    terraform validate
                                    terraform plan
                                    terraform ${action} --auto-approve
                                '''
                            }

                            if (params.action == 'apply') {
                                echo 'Waiting 30s for EC2 instances to be ready...'
                                sleep time: 30, unit: 'SECONDS'

                                dir('ansiblerole') {
                                    sh '''
                                        ansible-inventory -i aws_ec2_postgres.aws_ec2.yaml --graph
                                        ansible-playbook -i aws_ec2_postgres.aws_ec2.yaml playbook.yml
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }

    }
}
