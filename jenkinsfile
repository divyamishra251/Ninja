pipeline {
    parameters {
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION    = 'us-east-1'
    }

    agent any

    stages {

        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/divyamishra251/Ninja.git', branch: 'main'
            }
        }

        stage('Terraform Init & Validate') {
            steps {
                sh '''
                    terraform -chdir=terraform init
                    terraform -chdir=terraform validate
                    terraform -chdir=terraform plan
                '''
            }
        }

        stage('Terraform Apply/Destroy') {
            steps {
                sh 'cd terraform && terraform ${action} --auto-approve'
            }
        }

        stage('Sleep After Apply') {
            when {
                expression { return params.action == 'apply' }
            }
            steps {
                echo "Sleeping for 15 seconds to allow EC2 boot and tags sync..."
                sleep 15
            }
        }

        stage('Approve & Run Ansible Playbook') {
            when {
                expression { return params.action == 'apply' }
            }
            steps {
                input message: 'Do you approve running the Ansible playbook?', ok: 'Yes'
                echo "Running Ansible playbook using dynamic inventory..."
                sh '''
                    cd ansiblerole
                    ansible-playbook -i aws_ec2_postgres.aws_ec2.yaml playbook.yml
                '''
            }
        }
    }
}
